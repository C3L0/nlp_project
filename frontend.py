import json
import os
from datetime import datetime

import streamlit as st

st.set_page_config(page_title="Questionnaire sportif", layout="wide")

st.title("üèÖ Questionnaire pour recommandation de sport")
st.write(
    "R√©ponds aux questions ci-dessous pour que nous puissions analyser ton profil et te recommander un sport adapt√©."
)

# --- üèÉ Comp√©tences physiques ---
st.header("üèÉ Comp√©tences physiques")
endurance = st.slider(
    "Sur une √©chelle de 1 √† 5, comment √©values-tu ton endurance ?", 1, 5, 3
)
vitesse = st.slider(
    "Sur une √©chelle de 1 √† 5, comment √©values-tu ta vitesse ?", 1, 5, 3
)
souplesse = st.slider(
    "Sur une √©chelle de 1 √† 5, comment √©values-tu ta souplesse ?", 1, 5, 3
)
equilibre = st.radio(
    "Arrives-tu facilement √† tenir ton √©quilibre sur une surface instable ?",
    ["Oui", "Non"],
)
explosivite = st.radio(
    "Te consid√®res-tu explosif(ve) dans tes mouvements ?", ["Oui", "Non"]
)
effort_pref = st.selectbox(
    "Quel type d‚Äôeffort pr√©f√®res-tu ?",
    [
        "Courir longtemps",
        "Effort court et explosif",
        "Porter/pousser des charges",
        "Mouvements techniques et souplesse",
    ],
)
points_forts_physiques = st.text_area(
    "Quels sont selon toi tes points forts physiques ?"
)

# --- üß† Comp√©tences cognitives & mentales ---
st.header("üß† Comp√©tences cognitives & mentales")
concentration = st.slider(
    "√Ä quel point arrives-tu √† rester concentr√© malgr√© les distractions ?", 1, 5, 3
)
stress = st.slider("Comment g√®res-tu ton stress en comp√©tition ?", 1, 5, 3)
decision_rapide = st.radio(
    "Aimes-tu prendre des d√©cisions rapides pendant une action ?", ["Oui", "Non"]
)
anticipation = st.radio(
    "Arrives-tu √† anticiper facilement les actions des autres ?", ["Oui", "Non"]
)
reaction_situation = st.selectbox(
    "Face √† une situation impr√©vue, tu es plut√¥t :",
    ["Bloqu√©(e)", "Calme", "R√©actif(ve)", "Strat√©gique"],
)
situation_courage = st.text_area(
    "D√©cris une situation o√π tu as d√ª faire preuve de courage ou de pers√©v√©rance."
)

# --- ü§ù Comp√©tences sociales ---
st.header("ü§ù Comp√©tences sociales & relationnelles")
travail_equipe = st.slider(
    "√Ä quel point pr√©f√®res-tu travailler en √©quipe plut√¥t que seul(e) ?", 1, 5, 3
)
motiver_autres = st.slider(
    "Comment √©values-tu ta capacit√© √† motiver les autres ?", 1, 5, 3
)
sport_collectif = st.radio(
    "Pr√©f√®res-tu les sports collectifs aux sports individuels ?", ["Oui", "Non"]
)
leader = st.radio("Te consid√®res-tu comme un leader dans une √©quipe ?", ["Oui", "Non"])
role_equipe = st.selectbox(
    "Quand tu joues en √©quipe, tu es plut√¥t :",
    [
        "Ax√© sur la coop√©ration",
        "Ax√© sur la communication",
        "Leader",
        "Ax√© sur la performance individuelle",
    ],
)
experience_groupe = st.text_area(
    "Raconte une exp√©rience sportive ou de groupe o√π tu t‚Äôes senti(e) √† ta place."
)

# --- üéØ Comp√©tences techniques ---
st.header("üéØ Comp√©tences techniques sp√©cifiques")
precision = st.slider("Comment √©values-tu ta pr√©cision (tir, lancer, passe) ?", 1, 5, 3)
aisance_engin = st.slider(
    "Comment √©values-tu ton aisance avec un engin (raquette, v√©lo, ski, etc.) ?",
    1,
    5,
    3,
)
eau = st.radio("Es-tu √† l‚Äôaise dans l‚Äôeau ?", ["Oui", "Non"])
combat = st.radio("As-tu d√©j√† pratiqu√© un sport de combat ?", ["Oui", "Non"])
gestes_techniques = st.multiselect(
    "Parmi ces gestes techniques, lesquels aimerais-tu d√©velopper ?",
    [
        "Pr√©cision de tir",
        "Dribbles / feintes",
        "Techniques de combat",
        "Nage / respiration",
        "Acrobatie / rotation",
    ],
)
competence_souhaitee = st.text_area(
    "D√©cris une comp√©tence technique que tu aimerais acqu√©rir."
)

# --- üåç Comp√©tences strat√©giques ---
st.header("üåç Comp√©tences strat√©giques / environnementales")
energie = st.slider(
    "√Ä quel point sais-tu g√©rer ton √©nergie sur un effort long ?", 1, 5, 3
)
orientation = st.slider(
    "Comment √©values-tu ta capacit√© √† t‚Äôorienter dans un espace ?", 1, 5, 3
)
adaptation = st.radio(
    "Aimes-tu t‚Äôadapter aux conditions ext√©rieures (m√©t√©o, terrain) ?", ["Oui", "Non"]
)
initiative = st.radio(
    "Prends-tu facilement des initiatives en pleine action ?", ["Oui", "Non"]
)
adapt_env = st.selectbox(
    "Quand tu dois t‚Äôadapter √† l‚Äôenvironnement, tu pr√©f√®res :",
    [
        "Jouer avec les conditions",
        "Optimiser ton placement",
        "G√©rer ton rythme",
        "Ma√Ætriser ton mat√©riel",
    ],
)
experience_env = st.text_area(
    "Raconte une fois o√π tu as d√ª t‚Äôadapter rapidement √† ton environnement."
)


# --- Bouton validation ---
if st.button("üì© Soumettre mes r√©ponses"):
    # Cr√©er un dictionnaire avec toutes les r√©ponses
    reponses = {
        "endurance": "endurance",
        "vitesse": "vitesse",
        "souplesse": "souplesse",
        "equilibre": "equilibre",
        "explosivite": "explosivite",
        "effort_pref": "effort_pref",
        "points_forts_physiques": "points_forts_physiques",
        "concentration": "concentration",
        "stress": "stress",
        "decision_rapide": "decision_rapide",
        "anticipation": "anticipation",
        "reaction_situation": "reaction_situation",
        "travail_equipe": "travail_equipe",
        "motiver_autres": "motiver_autres",
        "sport_collectif": "sport_collectif",
        "leader": "leader",
        "role_equipe": "role_equipe",
        "experience_groupe": "experience_groupe",
        "precision": "precision",
        "aisance_engin": "aisance_engin",
        "combat": "combat",
        "gestes_techniques": "gestes_techniques",
        "souhaitee": "souhaitee",
        "energie": "energie",
        "orientation": "orientation",
        "adaptation": "adaptation",
        "initiative": "initiative",
        "adapt_env": "adapt_env",
        "experience_env": "experience_env",
    }

    # V√©rifier si le fichier existe d√©j√†
    fichier = "reponses.json"
    if os.path.exists(fichier):
        with open(fichier, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = []

    # Ajouter les nouvelles r√©ponses
    data.append(reponses)

    # Sauvegarder dans le fichier
    with open(fichier, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

    st.success("‚úÖ R√©ponses enregistr√©es avec succ√®s dans reponses.json")
